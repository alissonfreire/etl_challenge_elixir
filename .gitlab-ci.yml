stages:
  - quality
  - test

quality:
  stage: quality
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'develop'
  before_script:
    - apk add --no-cache git
    - mix local.hex --force
    - mix local.rebar --force
    - mix deps.get
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
  script:
    - export CHANGED_FILES=$(git diff --name-only $CI_MERGE_REQUEST_TARGET_BRANCH_NAME $CI_COMMIT_SHA | grep -E '\.ex$|\.exs$')
    - mix compile --warnings-as-errors
    - if [ -n "$CHANGED_FILES" ]; then mix credo --strict $CHANGED_FILES; else echo "No Elixir files changed"; fi
    - if [ -n "$CHANGED_FILES" ]; then mix format --check-formatted $CHANGED_FILES; else echo "No Elixir files changed"; fi

test:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'develop'
  variables:
    MIX_ENV: "test"
    DB_DATABASE: etl_challenge
    DB_HOST: postgres
    DB_USER: postgres
    DB_PASS: postgres
    POSTGRES_DB: $DB_DATABASE
    POSTGRES_USER: $DB_USER
    POSTGRES_PASSWORD: $DB_PASS
    POSTGRES_HOST_AUTH_METHOD: trust
  services:
    - postgres:latest
  before_script:
    - apk add --no-cache git
    - mix local.hex --force
    - mix local.rebar --force
    - mix deps.get
    - mix ecto.create
    - mix ecto.migrate
  script:
    - mix test
